---
# *_managed vars denote whether ansible takes care of the application or not.
#   `X_managed: false` application will still fire if it is in `Y_managed: true`
#   application dependencies
#
# *_enabled vars denote whether the application is enabled or not. Unlike
#   X_managed it disables the application when `X_enabled: false`

###
### Server connection configuration
###
# Don't keep passwords in plain text, encrypt then. One option would be:
#   ansible-vault encrypt_string -J PASSWORD_PLACEHOLDER
ansible_user: ansible-guy   # <- Not required for ssh-key-based connection
ansible_password: changeme  # <- Not required for ssh-key-based connection
ansible_become_password: changeme

# All before this ROLES_CONF_TS4LE64m91 marker stays
# unchanged by build-sample-vars.sh script
#################### {{ ROLES_CONF_TS4LE64m91 }} ####################

###
### NGINX-PROXY
###
# Versions:
# * https://hub.docker.com/r/jwilder/nginx-proxy/tags?name=alpine
# Exposes:
# * nxinx_proxy_net - proxy network name
# -----
nginx_proxy_managed: false
nginx_proxy_enabled: false
nginx_proxy_version: alpine
nginx_proxy_owner: "{{ ansible_user | default(ansible_user_id) }}"
# nginx_proxy_compose_dir: ~/docker/nginx-proxy # <- Better leave automanaged, or uncomment and edit
nginx_proxy_service_name: nginx-proxy
nginx_proxy_hostname: "{{ nginx_proxy_service_name }}"
nginx_proxy_http_port: 80

###
### CLI-DOWNLOADERS
###
# Installs: curl, wget
# -----
# cli_downloaders_exclude:   # <- Won't install list
#   - curl
cli_downloaders_managed: false
cli_downloaders_exclude: []

###
### DOCKER
###
# docker_users:   # <- Users to be added to docker group
#   - "{{ ansible_user | default(ansible_user_id) }}"
docker_managed: false
docker_users: []

###
### EDITORS
###
# Installs: nano, neovim, vim
# -----
# editors_exclude:   # <- Won't install list
#   - vim
editors_managed: false
editors_exclude: []
